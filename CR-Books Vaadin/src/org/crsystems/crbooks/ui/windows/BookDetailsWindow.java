package org.crsystems.crbooks.ui.windows;

import java.util.ArrayList;
import java.util.List;

import org.crsystems.crbooks.application.CRBooks;
import org.crsystems.crbooks.models.Book;
import org.crsystems.crbooks.models.BookCategory;
import org.crsystems.crbooks.models.BookComment;
import org.crsystems.crbooks.models.Order;
import org.crsystems.crbooks.models.OrderItem;
import org.crsystems.crbooks.ui.controls.CommentAdder;
import org.crsystems.crbooks.ui.controls.CommentControl;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class BookDetailsWindow extends CustomComponent {

	private VerticalLayout mainLayout;
	private VerticalLayout gridComments;
	private VerticalLayout gridCommentsContainer;
	private Label labelCommentHeader;
	private Panel panelBase;
	private VerticalLayout gridPanelBase;
	private HorizontalLayout gridBookDescription;
	private VerticalLayout gridBookData;
	private TextArea textBookDescription;
	private GridLayout gridBookCustomData;
	private Button buttonAddToOrder;
	private Label labelCategories;
	private HorizontalLayout gridAmount;
	private TextField textAmount;
	private Label labelAmount;
	private Label labelPublisher;
	private Label labelEdition;
	private Label labelAuthor;
	private HorizontalLayout gridTitlePrice;
	private Label labelBookPrice;
	private Label labelBookTitle;
	private Panel panelImage;
	private VerticalLayout gridImage;
	private Book book;

	public BookDetailsWindow() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		addListeners();
	}

	
	private void addListeners() {
		this.buttonAddToOrder.addListener(new ClickListener() {

			public void buttonClick(ClickEvent event) {
				onAddToOrderButton();
			}
			
		});
	}


	protected void onAddToOrderButton() {
		OrderItem item = new OrderItem();
		item.setBook(this.book);
		Integer amount = 0;
		try {
			amount = Integer.parseInt(this.textAmount.getValue().toString());
		} catch (Exception e) {
			amount = 1;
		}
		item.setAmount(amount);
		CRBooks.getCurrentSession().addItem(item);
	}


	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// panelBase
		panelBase = buildPanelBase();
		mainLayout.addComponent(panelBase);
		
		// gridComments
		gridComments = buildGridComments();
		mainLayout.addComponent(gridComments);
		
		return mainLayout;
	}

	public BookDetailsWindow(Book book) {
		this.book = book;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		addListeners();		
		this.textBookDescription.setValue(book.getDescription());
		this.textAmount.setValue(0);
		this.labelAuthor.setValue(String.format("<b>Autor:</b> %s", book.getAuthor().getName()));
		this.labelBookPrice.setValue(String.format("<span class=\"cr-books-price\">$%.2f</span>", book.getPrice()));
		this.labelBookTitle.setValue(String.format("<h2>%s</h2>", book.getTitle()));
		String categories = "";
		List<BookCategory> cats = book.getCategories(); 
		for (BookCategory c : cats) {
			if (cats.indexOf(c) == cats.size() - 1) {
				categories = String.format("%s%s.", categories, c.getName());
			} else {
				categories = String.format("%s%s, ",categories, c.getName());
			}
		}
		this.labelCategories.setValue(String.format("<b>Categorias:</b> %s", categories));
		this.labelEdition.setValue(String.format("%dª Edición.", book.getEdition()));
		this.labelPublisher.setValue(String.format("<b>Editorial:</b> %s", book.getPublisher().getName()));		
		makeBookImage();
		makeBookComments();
	}
	
	
	private void makeBookComments() {
		System.out.println(this.book.getComments().size());
		for (BookComment comment : this.book.getComments()) {
			this.gridCommentsContainer.addComponent(new CommentControl(comment));
			System.out.println(comment.getText());
		}
		boolean bookOwned = false;
		List<Order> list = CRBooks.getCurrentUser().getOrders();
		if ( list == null )list = new ArrayList<Order>();
		System.out.println(list.size());
		for (Order order : list) {
			if (bookOwned) break;
			for (OrderItem item : order.getItems()) {
				if (item.getBook().equals(this.book)) {
					bookOwned = true;
				}
				if (bookOwned) break;
			}
		}
		//if (bookOwned) {
			this.gridCommentsContainer.addComponent(new CommentAdder(this.book, CRBooks.getCurrentUser()));
		//}
	}


	private void makeBookImage() {
	}


	private Panel buildPanelBase() {
		// common part: create layout
		panelBase = new Panel();
		panelBase.setImmediate(false);
		panelBase.setWidth("100.0%");
		panelBase.setHeight("-1px");
		
		// gridPanelBase
		gridPanelBase = buildGridPanelBase();
		panelBase.setContent(gridPanelBase);
		
		return panelBase;
	}

	
	private VerticalLayout buildGridPanelBase() {
		// common part: create layout
		gridPanelBase = new VerticalLayout();
		gridPanelBase.setImmediate(false);
		gridPanelBase.setWidth("100.0%");
		gridPanelBase.setHeight("-1px");
		gridPanelBase.setMargin(true);
		
		// gridBookDescription
		gridBookDescription = buildGridBookDescription();
		gridPanelBase.addComponent(gridBookDescription);
		
		return gridPanelBase;
	}

	
	private HorizontalLayout buildGridBookDescription() {
		// common part: create layout
		gridBookDescription = new HorizontalLayout();
		gridBookDescription.setImmediate(false);
		gridBookDescription.setWidth("100.0%");
		gridBookDescription.setHeight("100.0%");
		gridBookDescription.setMargin(true);
		gridBookDescription.setSpacing(true);
		
		// panelImage
		panelImage = buildPanelImage();
		gridBookDescription.addComponent(panelImage);
		gridBookDescription
				.setComponentAlignment(panelImage, new Alignment(48));
		
		// gridBookData
		gridBookData = buildGridBookData();
		gridBookDescription.addComponent(gridBookData);
		gridBookDescription.setExpandRatio(gridBookData, 1.0f);
		
		return gridBookDescription;
	}

	
	private Panel buildPanelImage() {
		// common part: create layout
		panelImage = new Panel();
		panelImage.setImmediate(false);
		panelImage.setWidth("128px");
		panelImage.setHeight("128px");
		
		// gridImage
		gridImage = new VerticalLayout();
		gridImage.setImmediate(false);
		gridImage.setWidth("100.0%");
		gridImage.setHeight("100.0%");
		gridImage.setMargin(false);
		panelImage.setContent(gridImage);
		
		return panelImage;
	}

	
	private VerticalLayout buildGridBookData() {
		// common part: create layout
		gridBookData = new VerticalLayout();
		gridBookData.setImmediate(false);
		gridBookData.setWidth("100.0%");
		gridBookData.setHeight("100.0%");
		gridBookData.setMargin(true);
		gridBookData.setSpacing(true);
		
		// gridTitlePrice
		gridTitlePrice = buildGridTitlePrice();
		gridBookData.addComponent(gridTitlePrice);
		
		// gridBookCustomData
		gridBookCustomData = buildGridBookCustomData();
		gridBookData.addComponent(gridBookCustomData);
		
		// textBookDescription
		textBookDescription = new TextArea();
		textBookDescription.setImmediate(false);
		textBookDescription.setWidth("100.0%");
		textBookDescription.setHeight("-1px");
		textBookDescription.setInvalidAllowed(false);
		textBookDescription.setReadThrough(false);
		textBookDescription.setWriteThrough(false);
		textBookDescription.setEnabled(false);
		gridBookData.addComponent(textBookDescription);
		
		return gridBookData;
	}

	
	private HorizontalLayout buildGridTitlePrice() {
		// common part: create layout
		gridTitlePrice = new HorizontalLayout();
		gridTitlePrice.setImmediate(false);
		gridTitlePrice.setWidth("100.0%");
		gridTitlePrice.setHeight("-1px");
		gridTitlePrice.setMargin(false);
		gridTitlePrice.setSpacing(true);
		
		// labelBookTitle
		labelBookTitle = new Label();
		labelBookTitle.setImmediate(false);
		labelBookTitle.setWidth("-1px");
		labelBookTitle.setHeight("-1px");
		labelBookTitle.setValue("<h2>Título del libro</h2>");
		labelBookTitle.setContentMode(3);
		gridTitlePrice.addComponent(labelBookTitle);
		gridTitlePrice.setComponentAlignment(labelBookTitle, new Alignment(33));
		
		// labelBookPrice
		labelBookPrice = new Label();
		labelBookPrice.setImmediate(false);
		labelBookPrice.setWidth("-1px");
		labelBookPrice.setHeight("-1px");
		labelBookPrice.setValue("<b>$XX</b>");
		labelBookPrice.setContentMode(3);
		gridTitlePrice.addComponent(labelBookPrice);
		gridTitlePrice.setComponentAlignment(labelBookPrice, new Alignment(34));
		
		return gridTitlePrice;
	}

	
	private GridLayout buildGridBookCustomData() {
		// common part: create layout
		gridBookCustomData = new GridLayout();
		gridBookCustomData.setImmediate(false);
		gridBookCustomData.setWidth("100.0%");
		gridBookCustomData.setHeight("-1px");
		gridBookCustomData.setMargin(false);
		gridBookCustomData.setSpacing(true);
		gridBookCustomData.setColumns(2);
		gridBookCustomData.setRows(4);
		
		// labelAuthor
		labelAuthor = new Label();
		labelAuthor.setImmediate(false);
		labelAuthor.setWidth("100.0%");
		labelAuthor.setHeight("-1px");
		labelAuthor.setValue("Autor: ---");
		labelAuthor.setContentMode(3);
		gridBookCustomData.addComponent(labelAuthor, 0, 0);
		
		// labelEdition
		labelEdition = new Label();
		labelEdition.setImmediate(false);
		labelEdition.setWidth("-1px");
		labelEdition.setHeight("-1px");
		labelEdition.setValue("Xª edición");
		labelEdition.setContentMode(3);
		gridBookCustomData.addComponent(labelEdition, 1, 0);
		gridBookCustomData
				.setComponentAlignment(labelEdition, new Alignment(6));
		
		// labelPublisher
		labelPublisher = new Label();
		labelPublisher.setImmediate(false);
		labelPublisher.setWidth("100.0%");
		labelPublisher.setHeight("-1px");
		labelPublisher.setValue("Editorial: ---");
		labelPublisher.setContentMode(3);
		gridBookCustomData.addComponent(labelPublisher, 0, 1);
		
		// gridAmount
		gridAmount = buildGridAmount();
		gridBookCustomData.addComponent(gridAmount, 1, 2);
		gridBookCustomData.setComponentAlignment(gridAmount, new Alignment(6));
		
		// labelCategories
		labelCategories = new Label();
		labelCategories.setImmediate(false);
		labelCategories.setWidth("100.0%");
		labelCategories.setHeight("-1px");
		labelCategories.setValue("Categorias:");
		labelCategories.setContentMode(3);
		gridBookCustomData.addComponent(labelCategories, 0, 3);
		
		// buttonAddToOrder
		buttonAddToOrder = new Button();
		buttonAddToOrder.setCaption("Agregar al pedido");
		buttonAddToOrder.setImmediate(true);
		buttonAddToOrder.setWidth("-1px");
		buttonAddToOrder.setHeight("-1px");
		gridBookCustomData.addComponent(buttonAddToOrder, 1, 3);
		gridBookCustomData.setComponentAlignment(buttonAddToOrder,
				new Alignment(34));
		
		return gridBookCustomData;
	}

	
	private HorizontalLayout buildGridAmount() {
		// common part: create layout
		gridAmount = new HorizontalLayout();
		gridAmount.setImmediate(false);
		gridAmount.setWidth("-1px");
		gridAmount.setHeight("-1px");
		gridAmount.setMargin(false);
		gridAmount.setSpacing(true);
		
		// labelAmount
		labelAmount = new Label();
		labelAmount.setImmediate(false);
		labelAmount.setWidth("-1px");
		labelAmount.setHeight("-1px");
		labelAmount.setValue("Cantidad:");
		gridAmount.addComponent(labelAmount);
		gridAmount.setComponentAlignment(labelAmount, new Alignment(34));
		
		// textAmount
		textAmount = new TextField();
		textAmount.setImmediate(false);
		textAmount.setWidth("-1px");
		textAmount.setHeight("-1px");
		textAmount.setSecret(false);
		gridAmount.addComponent(textAmount);
		gridAmount.setComponentAlignment(textAmount, new Alignment(6));
		
		return gridAmount;
	}

	
	private VerticalLayout buildGridComments() {
		// common part: create layout
		gridComments = new VerticalLayout();
		gridComments.setImmediate(false);
		gridComments.setWidth("100.0%");
		gridComments.setHeight("100.0%");
		gridComments.setMargin(false);
		
		// labelCommentHeader
		labelCommentHeader = new Label();
		labelCommentHeader.setImmediate(false);
		labelCommentHeader.setWidth("-1px");
		labelCommentHeader.setHeight("-1px");
		labelCommentHeader.setValue("<h2>Comentarios</h2>");
		labelCommentHeader.setContentMode(3);
		gridComments.addComponent(labelCommentHeader);
		
		// gridCommentsContainer
		gridCommentsContainer = new VerticalLayout();
		gridCommentsContainer.setImmediate(false);
		gridCommentsContainer.setWidth("-1px");
		gridCommentsContainer.setHeight("-1px");
		gridCommentsContainer.setMargin(false);
		gridComments.addComponent(gridCommentsContainer);
		gridComments.setComponentAlignment(gridCommentsContainer,
				new Alignment(48));
		
		return gridComments;
	}

}
