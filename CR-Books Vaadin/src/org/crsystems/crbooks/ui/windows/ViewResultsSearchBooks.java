package org.crsystems.crbooks.ui.windows;

import java.util.List;

import org.crsystems.crbooks.application.CRBooks;
import org.crsystems.crbooks.models.Book;
import org.crsystems.crbooks.models.OrderItem;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.BaseTheme;

public class ViewResultsSearchBooks extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3492356023964476722L;

	private abstract class ItemClickListener implements ClickListener {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 2053496667039004757L;
		protected Book itemD;
		
		public ItemClickListener(Book itemT) {
			this.itemD = itemT;
		}
		
	}
	
	private abstract class ItemClickListenerEx implements ClickListener {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = 2053496667039004757L;
		protected Book itemD;
		protected TextField fieldD;
		
		public ItemClickListenerEx(Book itemT, TextField fieldD) {
			this.itemD = itemT;
			this.fieldD = fieldD;
		}
		
	}	
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Table table_1=new Table();;
	@AutoGenerated
	private Label labelTittle= new Label();

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public Book item;
	public SearchBooksWindow search;
	public String title;
	public String author;
	
	
	
	
	public ViewResultsSearchBooks(String title, String author) {
			
		this.title=title;
		this.author = author;	
		buildMainLayout();
		setCompositionRoot(mainLayout);	
		
	}
	
	public ViewResultsSearchBooks() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
	}
	
	public List<Book> getBooksSearch()
	{

		
		if(this.title!= null && !this.title.equals("")){
			labelTittle.setValue("<h2> Resultado de la Busqueda<h2>");
			labelTittle.setContentMode(3);
			return Book.getByTitle(this.title);
		}else if(this.author!=null && !this.author.equals("")){
			labelTittle.setValue("<h2> Resultado de la Busqueda<h2>");
			labelTittle.setContentMode(3);
			return Book.getByAuthorName(this.author);
		}
		else if((this.title!=null && !this.title.equals(""))&&(this.author!=null && !this.author.equals("")))
		{
			labelTittle.setValue("<h2> Resultado de la Busqueda<h2>");
			labelTittle.setContentMode(3);
			return Book.getByTitleAndAuthorName(this.title, this.author);
		}
		else if((this.title!=null && this.title.equals(""))&&(this.author!=null && this.author.equals(""))){
			labelTittle.setValue("<h2> Resultado de la Busqueda<h2>");
			labelTittle.setContentMode(3);
			return Book.getAll();
		}
		else if((this.title==null && this.author==null))
		{
			labelTittle.setValue("<h2> Catalogo de Libros<h2>");
			labelTittle.setContentMode(3);
			return Book.getAll();
		}
		return null;
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		mainLayout.setComponentAlignment(panel_1, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("-1px");
		panel_1.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);
		
		return panel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(true);
		
		// labelTittle
		//labelTittle = new Label();
		labelTittle.setImmediate(true);
		labelTittle.setWidth("-1px");
		labelTittle.setHeight("-1px");
		//labelTittle.setValue("<h2> Catalogo de Libros<h2>");
		//labelTittle.setContentMode(3);
		verticalLayout_2.addComponent(labelTittle);
		verticalLayout_2.setComponentAlignment(labelTittle, new Alignment(20));
		
		// table_1
		
		table_1.setImmediate(true);
		createTableData();
		table_1.setWidth("100%");
		table_1.setHeight("-1px");
		verticalLayout_2.addComponent(table_1);
		verticalLayout_2.setComponentAlignment(table_1, new Alignment(48));
		
		return verticalLayout_2;
	}
	
	
		
	private void createTableData() {
		createTableColumns(this.table_1);
		for (Book item : getBooksSearch()) {
			table_1.addItem(itemToTable(item, true, true), item);
		}
	}
	
	protected Table createTableColumns(Table tableData) 
	{
		tableData.addContainerProperty("Imagen", Embedded.class, null);
		tableData.addContainerProperty("Nombre", String.class, null);
		tableData.addContainerProperty("Autor", String.class, null);
		tableData.addContainerProperty("Editorial", String.class, null);
		tableData.addContainerProperty("Edición", String.class, null);
		tableData.addContainerProperty("Precio", String.class, null);
		tableData.addContainerProperty("Acciones", HorizontalLayout.class, null);		
	    
		return tableData;
		
	}
	
	
	protected Object[] itemToTable(Book item, boolean showOrder, boolean showDetails) {
		
		ThemeResource src = new ThemeResource(item.thumbName());
		Embedded img = new Embedded();
		img.setSource(src);
		img.setWidth("32px");
		img.setHeight("32px");
		
		return new Object[] {
				img,
				item.getTitle(),
				item.getAuthor().getName(),
				item.getPublisher().getName(),
				item.getEdition(),
				String.format("%.2f", item.getPrice()),
				createActionLayout11(item, showOrder)
		};
	}
	
	private HorizontalLayout createOrderButton(Book item2) {
		
		HorizontalLayout l = new HorizontalLayout();
		l.setSpacing(true);
		TextField text = new TextField();
		l.addComponent(text);
		Button buttonOrder = new Button("Pedir");
		buttonOrder.addListener(new ItemClickListenerEx(item2, text) {

			private static final long serialVersionUID = -2387742858057025903L;

			public void buttonClick(ClickEvent event) {
				onOrderButtonClick(itemD, fieldD);
			}
			
		});		
		l.addComponent(buttonOrder);
		return l;
	
	}

	protected HorizontalLayout createActionLayout11(Book item, boolean showOrder) {
		
		HorizontalLayout l = new HorizontalLayout();
		
		l.addComponent(createOrderButton(item));	
		l.addComponent(createDetailsButton(item));	
		l.setSizeFull();
		l.setSpacing(true);
		return l;
	}

	private Component createDetailsButton(Book item2) {
		Button button = new Button("Detalles");
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addListener(new ItemClickListener(item2) {

			/**
			 * 
			 */
			private static final long serialVersionUID = -650780901421271043L;

			public void buttonClick(ClickEvent event) {
				onDetailsButtonClick(itemD);
			}
			
		});	
		return button;
	}
	
	private void onOrderButtonClick(Book book, TextField field) {
		Integer amount = 0;
		try {
			amount = Integer.parseInt(field.getValue().toString());
		} catch (Exception e) {
			amount = 1;
		}
		OrderItem i = new OrderItem();
		i.setBook(book);
		i.setAmount(amount);
		CRBooks.getCurrentSession().addItem(i);
	}	
	
	private void onDetailsButtonClick(Book item) {
		if (item == null) return;
		CRBooks.setView(new BookDetailsWindow(item));
	}
	

}
