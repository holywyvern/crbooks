package org.crsystems.crbooks.ui.windows;

import org.crsystems.crbooks.application.CRBooks;
import org.crsystems.crbooks.models.Order;
import org.crsystems.crbooks.models.OrderItem;
import org.crsystems.crbooks.models.OrderState;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.themes.BaseTheme;

public class ViewUserOrders extends CustomComponent {

	private abstract class ItemClickListener implements ClickListener {
		
		protected Order itemDV;
		
		public	ItemClickListener(Order item) {
			itemDV = item;
		}
	}	
	
	private VerticalLayout mainLayout;
	private Panel panelBase;
	private VerticalLayout gridBase;
	private Label labelHeader;

	public ViewUserOrders() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		if (CRBooks.getCurrentUser().getOrders() == null || CRBooks.getCurrentUser().getOrders().size() < 1) {
			drawNoOrdersPanel();
		} else {
			drawOrdersTable();
		}
	}

	
	private void drawOrdersTable() {
		Table tableOrders = new Table();
		tableOrders.setSizeFull();
		tableOrders.setHeight("-1px");
		tableOrders.setImmediate(false);
		gridBase.addComponent(tableOrders);
		gridBase.setExpandRatio(tableOrders, 1.0f);
		tableOrders.addContainerProperty("Fecha de pedido", String.class, null);
		tableOrders.addContainerProperty("Costo total", Label.class, null);
		tableOrders.addContainerProperty("Estado", String.class, null);
		tableOrders.addContainerProperty("Acciones", HorizontalLayout.class, null);
		for (Order order : CRBooks.getCurrentUser().getOrders()) {
			tableOrders.addItem(orderToTable(order), order);
		}
	}


	private Object[] orderToTable(Order order) {
		return new Object[] {
			order.getCreatedAt().toString(),
			priceLabel(order),
			order.getState().getName(),
			createOrdenActions(order)
		};
	}


	private Label priceLabel(Order order) {
		Label l = new Label(String.format("<span class=\"cr-books-price-label-upper-zero\">$%.2f</span>", order.getTotalPrice()));
		l.setContentMode(Label.CONTENT_XHTML);
		return l;
	}


	private HorizontalLayout createOrdenActions(Order order) {
		HorizontalLayout l = new HorizontalLayout();
		l.setSizeFull();
		l.setSpacing(true);
		l.addComponent(createDetailsButton(order));
		if (order.isEditable()) {
			l.addComponent(createEditButton(order));
			l.addComponent(createCanceOrderButton(order));
		}
		return l;
	}


	private Component createCanceOrderButton(Order order) {
		Button button = new Button("Cancelar");
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addListener(new ItemClickListener(order) {
			public void buttonClick(ClickEvent event) {
				onCancelItemClick(itemDV);
			}
			
		});
		return button;
	}


	protected void onCancelItemClick(Order item) {
		item.setState(OrderState.getByID(2));
		if (item.update()) {
			CRBooks.setView(new ViewUserOrders());
			CRBooks.showTrayMessage("Se ha cancelado un pedido con éxito.");
		}
	}


	private Button createEditButton(Order order) {
		Button button = new Button("Editar");
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addListener(new ItemClickListener(order) {
			public void buttonClick(ClickEvent event) {
				onEditItemClick(itemDV);
			}
			
		});
		return button;
	}


	protected void onEditItemClick(Order itemDV) {
		CRBooks.getCurrentSession().setOrder(itemDV);
		CRBooks.setView(new CurrentOrderWindow());
	}


	private Button createDetailsButton(Order order) {
		Button button = new Button("Detalles");
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addListener(new ItemClickListener(order) {
			public void buttonClick(ClickEvent event) {
				onDetailsItemClick(itemDV);
			}
			
		});
		return button;
	}


	protected void onDetailsItemClick(Order item) {
		WindowOrderDetails window = new WindowOrderDetails(item);
		CRBooks.getInstance().getMainWindow().addWindow(window);
		window.setVisible(true);
	}		
	
	private void drawNoOrdersPanel() {
		Label label = new Label("<h1>No haz realizado ningún pedido aún.</h1>");
		gridBase.addComponent(label);
	}


	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panelBase
		panelBase = buildPanelBase();
		mainLayout.addComponent(panelBase);
		mainLayout.setExpandRatio(panelBase, 1.0f);
		
		return mainLayout;
	}

	
	private Panel buildPanelBase() {
		// common part: create layout
		panelBase = new Panel();
		panelBase.setImmediate(false);
		panelBase.setWidth("100%");
		panelBase.setHeight("100.0%");
		
		// gridBase
		gridBase = buildGridBase();
		panelBase.setContent(gridBase);
		
		return panelBase;
	}

	
	private VerticalLayout buildGridBase() {
		// common part: create layout
		gridBase = new VerticalLayout();
		gridBase.setImmediate(false);
		gridBase.setWidth("100.0%");
		gridBase.setHeight("100.0%");
		gridBase.setMargin(true);
		
		// labelHeader
		labelHeader = new Label();
		labelHeader.setImmediate(false);
		labelHeader.setWidth("-1px");
		labelHeader.setHeight("-1px");
		labelHeader.setValue("<h3>Pedidos realizados</h3>");
		labelHeader.setContentMode(3);
		gridBase.addComponent(labelHeader);
		
		return gridBase;
	}

}
