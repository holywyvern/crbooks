package org.crsystems.crbooks.ui.windows;

import java.util.Date;
import java.util.List;

import org.crsystems.crbooks.models.Order;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

public class ViewOrderClients extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Table table_1;
	@AutoGenerated
	private Label labelTitulo;
	private Date dateInit;
	private Date dateEnd;
	private String firstName;
	private String lastName;






	public ViewOrderClients(PopupDateField  dateInit,PopupDateField dateEnd,String firstName,String lastName) {
		this.dateInit= (Date) dateInit.getValue();		
		this.dateEnd=(Date)dateEnd.getValue();
		this.firstName=firstName;
		this.lastName=lastName;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}
	
	public ViewOrderClients() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	
	
	
	
	public List<Order> getOrderSearch()
	{
	
		if((dateInit==null && dateEnd==null)&&(firstName.equals("")&& lastName.equals("")))
		{
			return Order.getAll();
			
		}
		else if((dateInit!=null && dateEnd!=null)&& (!firstName.equals("")&& !lastName.equals(""))){
			System.out.println("Entre");
			return Order.getBetweenDatesAndUserName(dateInit, dateEnd, lastName);
			
		}
		else if((dateInit!=null && dateEnd!=null)&& (firstName.equals("")&& lastName.equals(""))){
			
			return Order.getBetweenDates(dateInit, dateEnd);
			
		}
		return null;
		//else if ((dateInit!=null && dateEnd!=null)&&(firstName.equals("")&& lastName.equals("")))
		//{			
						
			//return Order.getAll();
		//}	
			
		//return Order.getAll();
		
	}
	
	private void createTableData() {
		createTableColumns(this.table_1);
		if(this.getOrderSearch()!=null){
		for (Order item : getOrderSearch()) 
		{
			System.out.println("entre");
			table_1.addItem(itemToTable(item, true, true), item);
		}
		}
	}
	
	protected Table createTableColumns(Table tableData) 
	{
		tableData.addContainerProperty("Pedido", Integer.class, null);
		tableData.addContainerProperty("Estado", String.class, null);
		tableData.addContainerProperty("Fecha", Date.class, null);
		tableData.addContainerProperty("Costo Total", Double.class, null);
				
	    
		return tableData;
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		mainLayout.setComponentAlignment(panel_1, new Alignment(20));
		
		return mainLayout;
	}





	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("-1px");
		panel_1.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);
		
		return panel_1;
	}





	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(true);
		
		// labelTitulo
		labelTitulo = new Label();
		labelTitulo.setImmediate(false);
		labelTitulo.setWidth("-1px");
		labelTitulo.setHeight("-1px");
		labelTitulo.setValue("<h2>Pedidos del Cliente<h2>");
		labelTitulo.setContentMode(3);
		verticalLayout_2.addComponent(labelTitulo);
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(true);
		createTableData();
		table_1.setWidth("100.0%");
		table_1.setHeight("-1px");
		verticalLayout_2.addComponent(table_1);
		verticalLayout_2.setComponentAlignment(table_1, new Alignment(48));
		
		return verticalLayout_2;
	}
	
	
	
	
	
	protected Object[] itemToTable(Order item, boolean showOrder, boolean showDetails) {
		
		
		return new Object[] {
				
				item.getOrderID(),
				item.getState().getName(),
				item.getCreatedAt(),
				item.getTotalPrice()			
				
				
		};
	}
	
	/*private Button createOrderButton(Book item2) {
		
		Button buttonOrder = new Button("Pedir");
		buttonOrder.setStyleName(BaseTheme.BUTTON_LINK);
		buttonOrder.addListener(new ClickListener() {

			
			private static final long serialVersionUID = -2387742858057025903L;

			public void buttonClick(ClickEvent event) {
				onOrderButtonClick();
			}

			private void onOrderButtonClick() {
				// TODO Auto-generated method stub
				
			}

			
			
		});		
		return buttonOrder;
	
	}

	protected HorizontalLayout createActionLayout11(Book item, boolean showOrder) {
		
		HorizontalLayout l = new HorizontalLayout();
		
		l.addComponent(createOrderButton(item));	
		l.addComponent(createDetailsButton(item));	
		l.setSizeFull();
		l.setSpacing(true);
		return l;
	}

	private Component createDetailsButton(Book item2) {
		Button button = new Button("Ver detalles");
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addListener(new ClickListener() {

			
			private static final long serialVersionUID = -650780901421271043L;

			public void buttonClick(ClickEvent event) {
				onDetailsButtonClick();
			}

			private void onDetailsButtonClick() {
				// TODO Auto-generated method stub
				
			}
			
		});	
		return button;
	}
	
	private void onOrderButtonClick(Book book) {
		// TODO Auto-generated method stub
		
	}	
	
	private void onDetailsButtonClick(Book item) {
		if (item == null) return;
		CRBooks.setView(new BookDetailsWindow(item));
	}*/
	

}
