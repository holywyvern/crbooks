package org.crsystems.crbooks.ui.windows;

import java.util.Date;
import java.util.List;

import org.crsystems.crbooks.application.CRBooks;
import org.crsystems.crbooks.models.Order;


import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.BaseTheme;

public class ViewOrderClients extends CustomComponent {

	private abstract class ItemClickListener implements ClickListener {
		
		protected Order itemDV;
		
		public	ItemClickListener(Order item) {
			itemDV = item;
		}
	}	
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Table table_1;
	@AutoGenerated
	private Label labelTitulo;
	private Date dateInit;
	private Date dateEnd;
	private String firstName;
	private String lastName;
	

	



	public ViewOrderClients(PopupDateField  dateInit,PopupDateField dateEnd,String firstName,String lastName) {
		this.dateInit= (Date) dateInit.getValue();		
		this.dateEnd=(Date)dateEnd.getValue();
		this.firstName=firstName;
		this.lastName=lastName;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}
	
	public ViewOrderClients() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}
	
	
	public List<Order> getOrderSearch()
	{
	
		if((dateInit==null && dateEnd==null)&&(firstName.equals("")&& lastName.equals("")))
		{
			return Order.getAll();
			
		}
		else if((dateInit==null && dateEnd==null)&&(!firstName.equals("")&& lastName.equals("")))
		{
			System.out.println("Entre");
		
			return Order.getByNameUser(firstName);
			
		}
		else if((dateInit==null && dateEnd==null)&&(firstName.equals("")&& !lastName.equals(""))){
			return Order.getBySurnameUser(lastName);
		}
		else if((dateInit!=null && dateEnd!=null)&& (!firstName.equals("")&& !lastName.equals(""))){
			
			
			return Order.getBetweenDatesAndUserName(dateInit, dateEnd, lastName);
			
		}
		else if((dateInit!=null && dateEnd!=null)&& (firstName.equals("")&& lastName.equals(""))){
			
			return Order.getBetweenDates(dateInit, dateEnd);
			
		}
		return null;
		
		
	}
	
	private void createTableData() {
		createTableColumns(this.table_1);
		if(this.getOrderSearch()!=null){
		for (Order item : getOrderSearch()) 
		{			
			table_1.addItem(itemToTable(item, true, true), item);
		}
		}
	}
	
	protected Table createTableColumns(Table tableData) 
	{
		
		tableData.setSizeFull();
		tableData.setHeight("-1px");
		tableData.setImmediate(false);
		verticalLayout_2.addComponent(tableData);
		verticalLayout_2.setExpandRatio(tableData, 1.0f);
		tableData.addContainerProperty("Nombre", String.class, null);
		tableData.addContainerProperty("Apellido", String.class, null);
		tableData.addContainerProperty("Fecha de pedido", String.class, null);
		tableData.addContainerProperty("Costo total", Label.class, null);
		tableData.addContainerProperty("Estado", String.class, null);
		tableData.addContainerProperty("Acciones", HorizontalLayout.class, null);		
				
	    
		return tableData;
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		mainLayout.setComponentAlignment(panel_1, new Alignment(20));
		
		return mainLayout;
	}





	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("-1px");
		panel_1.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);
		
		return panel_1;
	}





	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(true);
		
		// labelTitulo
		labelTitulo = new Label();
		labelTitulo.setImmediate(false);
		labelTitulo.setWidth("-1px");
		labelTitulo.setHeight("-1px");
		labelTitulo.setValue("<h2>Pedidos del Cliente<h2>");
		labelTitulo.setContentMode(3);
		verticalLayout_2.addComponent(labelTitulo);
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(true);
		createTableData();
		table_1.setWidth("100.0%");
		table_1.setHeight("-1px");
		verticalLayout_2.addComponent(table_1);
		verticalLayout_2.setComponentAlignment(table_1, new Alignment(48));
		
		return verticalLayout_2;
	}
	
	
	
	
	
	protected Object[] itemToTable(Order item, boolean showOrder, boolean showDetails) {
		
		
		return new Object[] {
				
				item.getUser().getFirstName(),
				item.getUser().getLastName(),				
				item.getCreatedAt(),
				item.getTotalPrice(),
				item.getState().getName(),				
				createOrdenActions(item)
				
				
		};
	}
	private HorizontalLayout createOrdenActions(Order order) {
		HorizontalLayout l = new HorizontalLayout();
		l.setSizeFull();
		l.setSpacing(true);
		l.addComponent(createDetailsButton(order));
		return l;
	}
	
	
	private Button createDetailsButton(Order order) {
		
		Button button = new Button("Detalles");
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addListener(new ItemClickListener(order) {
			public void buttonClick(ClickEvent event) {
				onDetailsItemClick(itemDV);
			}
			
		});
		return button;
	}
	
	protected void onDetailsItemClick(Order item) {
		WindowOrderDetails window = new WindowOrderDetails(item);
		CRBooks.getInstance().getMainWindow().addWindow(window);
		window.setVisible(true);
	}		

	

}
